# Python intermedio Dataquest

En este documento se encuentran todos los códigos y análisis del módulo de Python intermedio para obtener la certificación en ciencia de datos. Hola

Los módulos son los siguientes:

-   Cleaning and Preparing Data in Python
-   Python Data Analysis Basics
-   Object-Oriented Python
-   Working with Dates and Times in Python
-   Guided Project: Exploring Hacker News Posts

## Cleaning and Preparing Data in Python

### Introducción

En este módulo se trabaja con el archivo *artworks.cvs* que tiene información sobre obras de arte.

```{python}
# carga del archivo con datos
from csv import reader
opened_file = open('artworks.csv')
read_file = reader(opened_file)
moma = list(read_file)
moma = moma[1:]
```

### Reemplazar caracteres y cadenas

Muestra las primeras cinco filas de la lista que tiene la información.

```{python}
# muestra las primeras cinco filas
for row in moma[:5]:
    print(row)
```

A continuación, se limpian los caracteres *"("* y *")"* que se encuentran en la columna de la nacionalidad

```{python}
# ejemplo de como se ve la nacionalidad
for row in moma[:3]:
    print(row[2])
```

Limpiamos todos los datos de la columna nacionalidad

```{python}
for row in moma:
    nationality = row[2]
    nationality = nationality.replace("(","")
    nationality = nationality.replace(")", "")
    row[2] = nationality
```

Ahora hacemos lo mismo con la columna género

```{python}
for row in moma:
    gender = row[5]
    gender = gender.replace("(","").replace(")","")
    row[5] = gender
```

### Corregir títulos
En algunas columnas de datos hay información que es necesario corregir porque representan lo mismo, pero no se escribe igual, por ejemplo: Male es lo mismo que male, pero hay que hacer una estandarización para que todas las categorías empiecen con mayúscula, para esto usamos el método *title.*

```{python}
# string capitalization
for row in moma:
    gender = row[5]
    gender = gender.title()
    if not gender:
        gender = "Gender Unknown/Other"
    row[5] = gender

for row in moma:
    nationality = row[2]
    nationality = nationality.title()
    if not nationality:
        nationality = "Nationality Unknown"
    row[2] = nationality
```
También,  es importante desarrollar una función que permita limpiar la información relacionada con las fechas. A continuación se presenta un extracto de las fechas que se encuentran en las columnas 3 y 4 respectivamente. 


```{python}
for row in moma[:5]:
    print(f"fecha inicio: {row[3]}")
    print(f"fecha final: {row[4]}")
    print("\n")
```
Se puede observar que las fechas están dentro de un paréntesis que tenemos que sacar. Además, el tipo de dato corresponde a una cadena, por tanto, tenemos que pasar los años a números enteros. 

La función que permite desarrollar este procedimiento es la siguiente: 


```{python}
# errors during data cleaning
def clean_and_convert(date):
    # check that we don't have an empty string
    if date != "":
        # move the rest of the function inside
        # the if statement
        date = date.replace("(", "")
        date = date.replace(")", "")
        date = int(date)
    return date
```
Ahora podemos aplicar esta función para limpiar los años de inicio y final de las obras que están en las columnas 3 y 4. 


```{python}
for row in moma:
    BeginDate = row[3]
    EndDate = row[4]
    row[3] = clean_and_convert(BeginDate)
    row[4] = clean_and_convert(EndDate)
```
### Quitando caracteres no deseados
A continuación, vamos a desarrollar un método para eliminar caracteres no deseados que se encuentran en una lista. Para esto definimos dos listas. Una tiene las cadenas que se quieren limpiar y la otra la lista de caracteres que se necesitan remover. 


```{python}
strings = ["good!", "morn?ing", "good?!", "morniZZZZng"]
bad_chars = ["!", "?", "Z"]
```
A conitnuación, crearemos una función que nos permita ver si en las diferentes cadenas de la lista *strings* hay caracteres no deseados. En caso de que sea así, esta función los removerá usando el método *replace*. 


```{python}
def strip_characters(string):
    for char in bad_chars:
        string = string.replace(char,"")
    return string
```

Después de que hayamos creado la función. Vamos a crear una lista llamada *cleaned_strings* donde guardemos las cadenas corregidas. Finalmente, aplicamos este método usando la misma función. 


```{python}
cleaned_strings = []
for s in strings:
    s = strip_characters(s)
    cleaned_strings.append(s)

print(cleaned_strings)
```
Ahora vamos a considerar un extracto del formato que tienen los años en el archivo de datos, esta información la incluimos en la lista *test_data* que se presenta a continuación: 


```{python}
test_data = ["1912", "1929", "1913-1923",
             "(1951)", "1994", "1934",
             "c. 1915", "1995", "c. 1912",
             "(1988)", "2002", "1957-1959",
             "c. 1955.", "c. 1970's", 
             "C. 1990-1999"]
```
Como se puede observar hay varios caracteres que se deben eliminar. El listado con los caracteres que debemos eliminar los incluimos en la lista: 


```{python}
bad_chars = bad_chars = ["(",")","c","C",".","s","'", " "]
```
A conitnuación, hacemos la limpieza de los datos usando la misma técnia que usamos anteriormente. 


```{python}
def strip_characters(string):
    for char in bad_chars:
        string = string.replace(char,"")
    return string

stripped_test_data = []

for s in test_data:
    s = strip_characters(s)
    stripped_test_data.append(s)

print(stripped_test_data)
```

### Corrigiendo fechas con intervalo
En la salida que muestra las fechas limpias, se observa que hay fechas que están en un intervalo y separadas por guión, por ejemplo: *'1913-1923'*. Esto se debe corregir. 

Vamos a eliminar el guión y poner en el intervalo el promedio de las dos fechas. 


```{python}
# Parsing Numbers from Complex Strings, Part Two
def process_date(date_string):
    if "-" in date_string: 
        date = date_string.split("-")
        promedio = round((int(date[0]) + int(date[1])) / 2)
        return promedio
    else: 
        date_string = int(date_string)
        return date_string
        

processed_test_data = []
for s in stripped_test_data:
    s = process_date(s)
    processed_test_data.append(s)

print(processed_test_data)
```
Como se puede apreciar, todos los datos de año se encuentran estandarizados y además corresponden a números enteros. 

Aplicamos este mismo procedimiento al conjunto de datos *moma* para limpiar los datos de las fechas. 


```{python}
for row in moma:
    Date = row[6]
    Date = strip_characters(Date)
    Date = process_date(Date)
    row[6] = Date
```
## Python Data Analysis Basics
